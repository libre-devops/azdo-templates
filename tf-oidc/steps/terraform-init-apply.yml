parameters:
  - name: terraformCodeLocation
    default: "terraform"
    displayName: "Location of the Terraform code"
    type: string

  - name: serviceConnection
    displayName: "Service Connection"
    type: string

  - name: backendUseAzureAdAuth
    displayName: "Use Azure AD for Authentication"
    type: string
    default: "true"

  - name: backendResourceGroup
    displayName: "Backend Resource Group Name"
    type: string

  - name: backendStorageAccount
    displayName: "Backend Storage Account Name"
    type: string

  - name: backendContainerName
    displayName: "Backend Container Name"
    type: string

  - name: storageUseAzureAD
    displayName: "Use Azure AD for Storage Authentication"
    type: string
    default: "true"

  - name: useOidcAuth
    displayName: "Use OIDC for Authentication"
    type: string
    default: "true"

  - name: debugMode
    displayName: "Whether debug mode should be enabled within the script"
    type: boolean
    default: false

  - name: scriptType
    displayName: "Script type for Azure-CLI task"
    default: "pscore"

  - name: planFile
    displayName: "Plan file name"
    type: string
    default: "tfplan-apply"

  - name: additionalEnvVars
    displayName: "Additional Environment Variables"
    type: object
    default: {}

steps:
  - pwsh: |
      Write-Host "Debug Mode is ON. Displaying Environment Variables:"
      Get-ChildItem Env:
      Write-Host "Executing additional debug commands..."
      Get-Location
      Get-ChildItem
    displayName: 'Debug Mode Commands'
    condition: ${{ eq(parameters.debugMode, true) }}

  - task: AzureCLI@2
    displayName: 'Authenticate to Azure & set terraform environment variables'
    name: 'AzureLogin'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: ${{ parameters.scriptType }}
      scriptLocation: inlineScript
      inlineScript: |
        # Set variables for the current job environment
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
        Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query id -o tsv)"
        Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]${{ parameters.useOidcAuth }}"
        Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN]$env:idToken"
        Write-Host "##vso[task.setvariable variable=ARM_USE_AZUREAD]${{ parameters.backendUseAzureAdAuth }}"
      workingDirectory: ${{ parameters.terraformCodeLocation }}
      addSpnToEnvironment: true
    enabled: true

  - pwsh: |
      terraform init `
      -backend-config="resource_group_name=$(TF_VAR_ARM_BACKEND_STORAGE_RG_NAME)" `
      -backend-config="storage_account_name=$(TF_VAR_ARM_BACKEND_STORAGE_ACCOUNT)" `
      -backend-config="container_name=$(TF_VAR_ARM_BACKEND_CONTAINER_NAME)" ; `
      
      terraform plan -out=${{ parameters.planFile }} ; `
      
      terraform apply -input=false -auto-approve ${{ parameters.planFile }}
    displayName: 'Terraform Init, Terraform Plan & Terraform Apply'
    name: 'TerraformApply'
    workingDirectory: ${{ parameters.terraformCodeLocation }}
    continueOnError: false
    enabled: true
    env:
      TF_VAR_ARM_BACKEND_STORAGE_ACCOUNT: ${{ parameters.backendStorageAccount }}
      TF_VAR_ARM_BACKEND_CONTAINER_NAME: ${{ parameters.backendContainerName }}
      TF_VAR_ARM_BACLEND_STORAGE_RG_NAME: ${{ parameters.backendResourceGroup }}
      ARM_STORAGE_USE_AZUREAD: ${{ parameters.storageUseAzureAD }}
      ARM_USE_OIDC: $(ARM_USE_OIDC)
      ARM_USE_AZUREAD: ${{ parameters.backendUseAzureAdAuth }}
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_OIDC_TOKEN: $(ARM_OIDC_TOKEN)
      ARM_TENANT_ID: $(ARM_TENANT_ID)

      # Enable debug logging for Terraform if debugMode is true
      ${{ if eq(parameters.debugMode, true) }}:
        TF_LOG: "DEBUG"
        TF_LOG_PATH: "$(System.DefaultWorkingDirectory)/terraform-debug.log"

      # Dynamically inject additional environment variables
      ${{ each envVar in parameters.additionalEnvVars }}:
        ${{ envVar.Key }}: ${{ envVar.Value }}
